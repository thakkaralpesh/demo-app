{"version":3,"sources":["loading.gif","logo.svg","listItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","className","onClick","editTodo","item","name","deleteTodo","App","state","newTodo","editing","editingIndex","notification","todos","loading","apiURL","handleChange","bind","addTodo","updateTodo","alert","console","log","axios","get","this","res","setTimeout","setState","data","event","target","value","post","Oldtodo","push","index","todo","delete","id","put","type","placeholder","onChange","disabled","length","src","loadingGif","alt","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2488a47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.8c636777.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst ListItem = props => {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <button className=\"btn-sm mr-4 btn btn-info\" onClick={props.editTodo}>\r\n        U\r\n      </button>\r\n      {props.item.name}\r\n      <button className=\"btn-sm ml-4 btn btn-danger\" onClick={props.deleteTodo}>\r\n        X\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ListItem;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ListItem from \"./listItem\";\nimport axios from \"axios\";\nimport loadingGif from \"./loading.gif\";\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      newTodo: \"\",\n      editing: false,\n      editingIndex: null,\n      notification: null,\n      todos: [],\n      loading: true\n    };\n\n    this.apiURL = \"https://5e57a5294c695f001432fedc.mockapi.io\"; //mockapi.io/login\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.editTodo = this.editTodo.bind(this);\n    //this.generateTodoId = this.generateTodoId.bind(this);\n    this.alert = this.alert.bind(this);\n  }\n\n  componentWillMount() {\n    console.log(\"Will Mounted\");\n  }\n  async componentDidMount() {\n    const res = await axios.get(`${this.apiURL}/todos`);\n    console.log(res);\n    setTimeout(() => {\n      this.setState({\n        todos: res.data,\n        loading: false\n      });\n    }, 1000);\n  }\n\n  handleChange(event) {\n    this.setState({\n      newTodo: event.target.value\n    });\n  }\n\n  async addTodo() {\n    const res = await axios.post(`${this.apiURL}/todos`, {\n      name: this.state.newTodo\n    });\n\n    const Oldtodo = this.state.todos;\n    Oldtodo.push(res.data);\n\n    this.setState({\n      todos: Oldtodo,\n      newTodo: \"\"\n    });\n    this.alert(\"Todo Created Successfully\");\n  }\n\n  async deleteTodo(index) {\n    const todos = this.state.todos;\n    const todo = todos[index];\n    await axios.delete(`${this.apiURL}/todos/${todo.id}`);\n    delete todos[index];\n    this.setState({ todos });\n    this.alert(\"Todo Deleted Successfully\");\n  }\n\n  editTodo(index) {\n    const todo = this.state.todos[index];\n    this.setState({\n      editing: true,\n      newTodo: todo.name,\n      editingIndex: index\n    });\n  }\n\n  async updateTodo() {\n    const todo = this.state.todos[this.state.editingIndex];\n\n    const res = await axios.put(`${this.apiURL}/todos/${todo.id}`, {\n      name: this.state.newTodo\n    });\n\n    const todos = this.state.todos;\n    todos[this.state.editingIndex] = res.data;\n    this.setState({ todos, editing: false, editingIndex: null, newTodo: \"\" });\n    this.alert(\"Todo Updated Successfully\");\n  }\n\n  alert(notification) {\n    this.setState({\n      notification\n    });\n\n    setTimeout(() => {\n      this.setState({ notification: null });\n    }, 2000);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          {this.state.notification && (\n            <div className=\"alert alert-success mt-3\">\n              <p className=\"text-center\">{this.state.notification}</p>\n            </div>\n          )}\n\n          <input\n            type=\"text\"\n            name=\"todo\"\n            value={this.state.newTodo}\n            className=\"my-4 form-control\"\n            placeholder=\"Add a New todo\"\n            onChange={this.handleChange}\n          />\n          <button\n            className=\"btn-success form-control mb-3\"\n            disabled={this.state.newTodo.length < 5}\n            onClick={this.state.editing ? this.updateTodo : this.addTodo}\n          >\n            {this.state.loading && <img src={loadingGif} alt=\"\" />}\n            {this.state.editing ? \"Update Todo\" : \"Add Todo \"}\n          </button>\n          {(!this.state.editing || this.state.loading) && (\n            <ul className=\"list-group\">\n              {this.state.todos.map((item, index) => {\n                return (\n                  <ListItem\n                    key={item.id}\n                    item={item}\n                    editTodo={() => {\n                      this.editTodo(index);\n                    }}\n                    deleteTodo={() => {\n                      this.deleteTodo(index);\n                    }}\n                  />\n                );\n              })}\n            </ul>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}